{
  "name": "Lestenhome",
  "tagline": "somewhere own by lesten",
  "body": "### This is My first page. About Python Env\r\n\r\n自己的mac 自带的 python版本是python 2.7.13 想安装一些东西 但是又不想直接装在系统自带的python环境里面\r\n这时候咋办呢？ 因为 如果 把系统的python 搞坏了 想重装相当的麻烦啊。\r\n然后就 遇到了  pyenv 这个玩意，嗯 还不错。\r\n\r\n'''\r\n其实  据说还有个玩意叫做 virtualenv。 \r\n是独立运行的一套 python_env. \r\n#安装：\r\n\tpip install virtualenv\r\n#创建虚拟环境：\r\n\tvirtualenv myenv\r\n\t指定版本\r\n\tvirtualenv --python=/url/local/python2.7/bin/python py2.7\r\n\t指定python 2.7的环境 \r\n#进入虚拟环境：\r\n\tsource myenv/bin/activate\r\n\tok,进入了myenv的虚拟环境里了 \r\n#退出虚拟环境：\r\n\tdeactivate\r\n\t如果要删除虚拟环境直接 rm -rf myenv 就OK了\r\n'''\r\n\r\n##摘自：\r\nhttp://seisman.info/python-pyenv.html\r\n\r\n##1. 先在线安装 pyenv\t\r\n$ curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash\r\n顺利。其实 macos  直接用 brew install pyenv 也可以\r\n\r\n##2.接着导出环境变量 到 ~/.bashrc\r\nexport PYENV_ROOT=\"$HOME/.pyenv\"\r\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\r\neval \"$(pyenv init -)\"\r\neval \"$(pyenv virtualenv-init -)\"   # 这句可以不加\r\n\r\n##3. pyenv install --list \r\nshow 可以安装到python 版本  选择自己想要的\r\n\r\n##4. pyenv install 3.5.0 (python 版本号  自己指定)\r\npyenv 安装原理：\r\n从官网下载对应的版本压缩包到/tmp/目录，然后在/tmp/目录 执行编译安装，安装到~/.pyenv/versions/下面\r\npyenv 安装很慢的解决办法：\r\n可以先手动下载对应的版本压缩包，放到~/.pyenv/cache/下面，pyenv会校验md5值和完整性，确认无误的话就不会重新下载直接从这里安装\r\n顺利。\r\n\r\n初始是没有这个目录的,所以要手动创建\r\nmkdir ~/.pyenv/cache\r\ncp yourpath ~/.pyenv/cache\r\n然后 重新 pyenv install\r\n\r\n这时候出现了 zipimport.ZipImportError: can't decompress data; zlib not available\r\n这是 没有zlib库， 但是找了一圈,都说到 Fedora 或者 Ubuntu 的解决方案  但是没有macos 的。\r\n甚至有说 自己编译zlib 我还真make 了一个 然而还是没搞定 其中过程弯路不表\r\n最终找到[解决方案](https://github.com/pyenv/pyenv/issues/454)\r\n\r\n@nikolay I had the same issue, and was able to fix by updating command line tools on OSX. Just run xcode-select --install\r\nOnce, that's finished, you should be able to install 3.5.0\r\n\r\n终于解决这个问题\r\n\r\n##5. pyenv versions 显示系统安装的版本 用*号表明当前版本\r\n  system\r\n* 3.5.0 (set by /Users/lesten/.pyenv/version)\r\n但是进入 我自己的工程目录的时候 \r\n输入 python versions 还是会换回 系统python 版本\r\n这时候就需要  pyenv 指定 本地版本\r\n\r\npyenv local 设置面向程序的本地版本，通过将版本号写入当前目录下的 .python-version 文件的方式。通过这种方式设置的 Python 版本优先级较 global 高。pyenv 会从当前目录开始向上逐级查找 .python-version 文件，直到根目录为止。若找不到，就用 global 版本。\r\n$ pyenv local 2.7.3\r\npyenv shell\r\n设置面向 shell 的 Python 版本，通过设置当前 shell 的 PYENV_VERSION 环境变量的方式。这个版本的优先级比 local 和 global 都要高。--unset 参数可以用于取消当前 shell 设定的版本。\r\n\r\n##6. pyenv global 3.5.0  指定当前全局版本为 3.5.0\r\n输入 python 即可使用新版本的 python；\r\n系统自带的脚本会以 /usr/bin/python 的方式直接调用老版本的 python，因而不会对系统脚本产生影响；\r\n使用 pip 安装第三方模块时会自动按照到当前的python版本下，不会和系统模块发生冲突。\r\n使用 pip 安装模块后，可能需要执行 pyenv rehash 更新数据库；\r\n\r\n##7. pyenv 其他功能\r\npyenv uninstall 卸载某个版本\r\npyenv update 更新 pyenv 及其插件\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}